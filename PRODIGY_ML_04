{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO6ZNyWGt7PB/OLFbQwkZ4j"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"y4qUmohaHXOG"},"outputs":[],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import zipfile\n","import os\n","\n","zip_path = \"/content/drive/MyDrive/food-101.zip\"\n","extract_path = \"/content\"\n","\n","with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n","    zip_ref.extractall(extract_path)\n","\n","dataset_dir = \"/content/food-101/images\"\n","\n","if not os.path.exists(dataset_dir):\n","    raise FileNotFoundError(f\"Could not find 'images' folder at {dataset_dir}\")\n","\n","print(\"Using dataset directory:\", dataset_dir)\n","print(\"Example classes:\", os.listdir(dataset_dir)[:5])\n","\n","import tensorflow as tf\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.applications import ResNet50\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Dense, GlobalAveragePooling2D\n","from tensorflow.keras.optimizers import Adam\n","\n","image_size = (224, 224)\n","batch_size = 32\n","\n","datagen = ImageDataGenerator(\n","    rescale=1./255,\n","    validation_split=0.2,\n","    horizontal_flip=True,\n","    zoom_range=0.2,\n","    shear_range=0.2\n",")\n","\n","train_gen = datagen.flow_from_directory(\n","    dataset_dir,\n","    target_size=image_size,\n","    batch_size=batch_size,\n","    class_mode='categorical',\n","    subset='training'\n",")\n","\n","val_gen = datagen.flow_from_directory(\n","    dataset_dir,\n","    target_size=image_size,\n","    batch_size=batch_size,\n","    class_mode='categorical',\n","    subset='validation'\n",")\n","\n","num_classes = len(train_gen.class_indices)\n","\n","base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n","x = base_model.output\n","x = GlobalAveragePooling2D()(x)\n","x = Dense(256, activation='relu')(x)\n","predictions = Dense(num_classes, activation='softmax')(x)\n","\n","model = Model(inputs=base_model.input, outputs=predictions)\n","\n","for layer in base_model.layers:\n","    layer.trainable = False\n","\n","model.compile(optimizer=Adam(learning_rate=1e-4), loss='categorical_crossentropy', metrics=['accuracy'])\n","\n","history = model.fit(train_gen, validation_data=val_gen, epochs=5)\n","\n"]}]}